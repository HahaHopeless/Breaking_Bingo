{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js\",\n    _s3 = $RefreshSig$();\n\nimport \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Cell = ({\n  cellClass,\n  cellText,\n  cellIndex\n}) => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n  const [bingo, setBingo] = useState({\n    value: 0\n  });\n  var cells = null;\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n    setBingo(checkBingo());\n  }, [checked]);\n\n  const usePrevious = value => {\n    _s();\n\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref;\n  };\n\n  _s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n  const BINGO_CONDITIONS = [// Horizontal\n  [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17, 18], [19, 20, 21, 22, 23], //Vertical\n  [0, 5, 10, 14, 19], [1, 6, 11, 15, 20], [2, 7, 16, 21], [3, 8, 12, 17, 22], [4, 9, 13, 18, 23], //Diagonal\n  [0, 6, 17, 23], [4, 8, 15, 19]]; // const checkCombos = (arr, target) => {\n  //   let res = target.every((v) => arr.includes(v));\n  //   console.log(res);\n  // };\n\n  const checkBingo = () => {\n    _s2();\n\n    const getMatchedCombos = BINGO_CONDITIONS.filter(combos => {\n      return combos.every(index => {\n        return cells[index].classList.contains(\"checked\");\n      });\n    }); // return getMatchedCombos.length;\n\n    usePrevious(getMatchedCombos.length);\n  };\n\n  _s2(checkBingo, \"J4s2OsnSg0gYpj20mW1qIdfDTUo=\", false, function () {\n    return [usePrevious];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${cellClass} ${broken} ${checkClass}`,\n    onClick: () => {\n      if (checked === false) {\n        setCheckClass(\"checked\");\n        setChecked(true);\n        const brokenTextureNumber = Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n        setBroken(`broken${brokenTextureNumber}`);\n      } else {\n        console.log(\"Already broken ;_)\");\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"cellIndex\",\n      children: cellIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"cell_text\",\n      children: cellText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(Cell, \"2xXCn8QPVDxTh4jbet3HVtNI6LA=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js"],"names":["React","useState","useEffect","Cell","cellClass","cellText","cellIndex","checked","setChecked","checkClass","setCheckClass","broken","setBroken","bingo","setBingo","value","cells","document","querySelectorAll","checkBingo","usePrevious","ref","useRef","current","BINGO_CONDITIONS","getMatchedCombos","filter","combos","every","index","classList","contains","length","brokenTextureNumber","Math","floor","random","console","log"],"mappings":"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","sourcesContent":["import \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Cell = ({ cellClass, cellText, cellIndex }) => {\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n  const [bingo, setBingo] = useState({ value: 0 });\n\n  var cells = null;\n\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n    setBingo(checkBingo());\n  }, [checked]);\n\n  const usePrevious = (value) => {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref;\n  };\n\n  const BINGO_CONDITIONS = [\n    // Horizontal\n    [0, 1, 2, 3, 4],\n    [5, 6, 7, 8, 9],\n    [10, 11, 12, 13],\n    [14, 15, 16, 17, 18],\n    [19, 20, 21, 22, 23],\n    //Vertical\n    [0, 5, 10, 14, 19],\n    [1, 6, 11, 15, 20],\n    [2, 7, 16, 21],\n    [3, 8, 12, 17, 22],\n    [4, 9, 13, 18, 23],\n    //Diagonal\n    [0, 6, 17, 23],\n    [4, 8, 15, 19],\n  ];\n\n  // const checkCombos = (arr, target) => {\n  //   let res = target.every((v) => arr.includes(v));\n  //   console.log(res);\n  // };\n\n  const checkBingo = () => {\n    const getMatchedCombos = BINGO_CONDITIONS.filter((combos) => {\n      return combos.every((index) => {\n        return cells[index].classList.contains(\"checked\");\n      });\n    });\n    // return getMatchedCombos.length;\n    usePrevious(getMatchedCombos.length);\n  };\n  return (\n    <div\n      className={`${cellClass} ${broken} ${checkClass}`}\n      onClick={() => {\n        if (checked === false) {\n          setCheckClass(\"checked\");\n          setChecked(true);\n          const brokenTextureNumber =\n            Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n          setBroken(`broken${brokenTextureNumber}`);\n        } else {\n          console.log(\"Already broken ;_)\");\n        }\n      }}\n    >\n      <p className=\"cellIndex\">{cellIndex}</p>\n      <p className=\"cell_text\">{cellText}</p>\n    </div>\n  );\n};\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}