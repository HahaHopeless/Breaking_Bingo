{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js\",\n    _s = $RefreshSig$();\n\nimport \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Cell = ({\n  cellClass,\n  cellText,\n  cellIndex\n}) => {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n  var cells;\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n  }, []);\n  const BINGO_CONDITIONS = [//Horizontal\n  [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17, 18], [19, 20, 21, 22, 23], //Vertical\n  [0, 5, 10, 14, 19], [1, 6, 11, 15, 20], [2, 7, 16, 21], [3, 8, 12, 17, 22], [4, 9, 13, 18, 23], //Diagonal\n  [0, 6, 17, 23], [4, 8, 15, 19]];\n\n  const checkWin = () => {\n    // return BINGO_CONDITIONS.some((combos) => {\n    //   return combos.every((index) => {\n    //     // console.log(cells[index]);\n    //     return cells[index].classList.contains(\"checked\");\n    //   });\n    // });\n    BINGO_CONDITIONS.forEach(index => {\n      console.log(index);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${cellClass} ${broken} ${checkClass}`,\n    onClick: () => {\n      if (checked === false) {\n        setCheckClass(\"checked\");\n        setChecked(true);\n        const brokenTextureNumber = Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n        setBroken(`broken${brokenTextureNumber}`);\n        console.log(checkWin());\n      } else {\n        console.log(\"Already broken\");\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"cellIndex\",\n      children: cellIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"cell_text\",\n      children: cellText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cell, \"zayzyXTn8UnERV6Ih0WitO/6OIc=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js"],"names":["React","useState","useEffect","Cell","cellClass","cellText","cellIndex","checked","setChecked","checkClass","setCheckClass","broken","setBroken","cells","document","querySelectorAll","BINGO_CONDITIONS","checkWin","forEach","index","console","log","brokenTextureNumber","Math","floor","random"],"mappings":"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","sourcesContent":["import \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Cell = ({ cellClass, cellText, cellIndex }) => {\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n\n  var cells;\n\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n  }, []);\n  const BINGO_CONDITIONS = [\n    //Horizontal\n    [0, 1, 2, 3, 4],\n    [5, 6, 7, 8, 9],\n    [10, 11, 12, 13],\n    [14, 15, 16, 17, 18],\n    [19, 20, 21, 22, 23],\n    //Vertical\n    [0, 5, 10, 14, 19],\n    [1, 6, 11, 15, 20],\n    [2, 7, 16, 21],\n    [3, 8, 12, 17, 22],\n    [4, 9, 13, 18, 23],\n    //Diagonal\n    [0, 6, 17, 23],\n    [4, 8, 15, 19],\n  ];\n\n  const checkWin = () => {\n    // return BINGO_CONDITIONS.some((combos) => {\n    //   return combos.every((index) => {\n    //     // console.log(cells[index]);\n    //     return cells[index].classList.contains(\"checked\");\n    //   });\n    // });\n\n    BINGO_CONDITIONS.forEach((index) => {\n      console.log(index);\n    });\n  };\n\n  return (\n    <div\n      className={`${cellClass} ${broken} ${checkClass}`}\n      onClick={() => {\n        if (checked === false) {\n          setCheckClass(\"checked\");\n          setChecked(true);\n          const brokenTextureNumber =\n            Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n          setBroken(`broken${brokenTextureNumber}`);\n          console.log(checkWin());\n        } else {\n          console.log(\"Already broken\");\n        }\n      }}\n    >\n      <p className=\"cellIndex\">{cellIndex}</p>\n      <p className=\"cell_text\">{cellText}</p>\n    </div>\n  );\n};\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}