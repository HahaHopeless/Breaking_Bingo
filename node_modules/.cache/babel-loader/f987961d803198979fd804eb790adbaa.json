{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js\",\n    _s = $RefreshSig$();\n\nimport \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport winimage from \"../../Assets/Images/win.gif\";\n\nconst Cell = ({\n  cellClass,\n  cellText,\n  cellIndex\n}) => {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n  const [bingo, setBingo] = useState([]);\n  const [trackBingo, setTrackBingo] = useState(0);\n  const [showWin, setShowWin] = useState(-100);\n  var cells = null;\n  console.log(bingo);\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n    let checkMatch = checkBingo().every(r => {\n      setBingo(r);\n      return BINGO_CONDITIONS.includes(r);\n    });\n  }, [checked]); // useEffect(() => {\n  //   if (trackBingo < bingo) {\n  //     setTrackBingo(bingo);\n  //     setShowWin(100);\n  //     setTimeout(() => {\n  //       setShowWin(-100);\n  //     }, 2000);\n  //     console.log(\"Bingo\");\n  //   } else if (trackBingo == bingo) {\n  //     return;\n  //   }\n  // }, [bingo]);\n\n  const BINGO_CONDITIONS = [// Horizontal\n  [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17, 18], [19, 20, 21, 22, 23], //Vertical\n  [0, 5, 10, 14, 19], [1, 6, 11, 15, 20], [2, 7, 16, 21], [3, 8, 12, 17, 22], [4, 9, 13, 18, 23], //Diagonal\n  [0, 6, 17, 23], [4, 8, 15, 19]];\n\n  const checkBingo = () => {\n    const getMatchedCombos = BINGO_CONDITIONS.filter(combos => {\n      return combos.every(index => {\n        return cells[index].classList.contains(\"checked\");\n      });\n    });\n    return getMatchedCombos;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${cellClass} ${broken} ${checkClass}`,\n      onClick: () => {\n        if (checked === false) {\n          setCheckClass(\"checked\");\n          setChecked(true);\n          const brokenTextureNumber = Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n          setBroken(`broken${brokenTextureNumber}`);\n        } else {\n          console.log(\"Already broken ;_)\");\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cellIndex\",\n        children: cellIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cell_text\",\n        children: cellText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winScreen\",\n      style: {\n        zIndex: showWin,\n        opacity: showWin\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: winimage,\n        className: \"winImage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Cell, \"3HQfCAp/b02BR3TGCTh3LBkBWfY=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/mohsinkamal/Desktop/bingo/src/Components/Cell/Cell.js"],"names":["React","useState","useEffect","winimage","Cell","cellClass","cellText","cellIndex","checked","setChecked","checkClass","setCheckClass","broken","setBroken","bingo","setBingo","trackBingo","setTrackBingo","showWin","setShowWin","cells","console","log","document","querySelectorAll","checkMatch","checkBingo","every","r","BINGO_CONDITIONS","includes","getMatchedCombos","filter","combos","index","classList","contains","brokenTextureNumber","Math","floor","random","zIndex","opacity"],"mappings":"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","sourcesContent":["import \"./Cell_styles.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport winimage from \"../../Assets/Images/win.gif\";\n\nconst Cell = ({ cellClass, cellText, cellIndex }) => {\n  const [checked, setChecked] = useState(false);\n  const [checkClass, setCheckClass] = useState(\"\");\n  const [broken, setBroken] = useState(\"\");\n  const [bingo, setBingo] = useState([]);\n  const [trackBingo, setTrackBingo] = useState(0);\n  const [showWin, setShowWin] = useState(-100);\n  var cells = null;\n  console.log(bingo);\n\n  useEffect(() => {\n    cells = document.querySelectorAll(\".cell\");\n    let checkMatch = checkBingo().every((r) => {\n      setBingo(r);\n      return BINGO_CONDITIONS.includes(r);\n    });\n  }, [checked]);\n\n  // useEffect(() => {\n  //   if (trackBingo < bingo) {\n  //     setTrackBingo(bingo);\n  //     setShowWin(100);\n  //     setTimeout(() => {\n  //       setShowWin(-100);\n  //     }, 2000);\n  //     console.log(\"Bingo\");\n  //   } else if (trackBingo == bingo) {\n  //     return;\n  //   }\n  // }, [bingo]);\n\n  const BINGO_CONDITIONS = [\n    // Horizontal\n    [0, 1, 2, 3, 4],\n    [5, 6, 7, 8, 9],\n    [10, 11, 12, 13],\n    [14, 15, 16, 17, 18],\n    [19, 20, 21, 22, 23],\n    //Vertical\n    [0, 5, 10, 14, 19],\n    [1, 6, 11, 15, 20],\n    [2, 7, 16, 21],\n    [3, 8, 12, 17, 22],\n    [4, 9, 13, 18, 23],\n    //Diagonal\n    [0, 6, 17, 23],\n    [4, 8, 15, 19],\n  ];\n\n  const checkBingo = () => {\n    const getMatchedCombos = BINGO_CONDITIONS.filter((combos) => {\n      return combos.every((index) => {\n        return cells[index].classList.contains(\"checked\");\n      });\n    });\n    return getMatchedCombos;\n  };\n  return (\n    <>\n      <div\n        className={`${cellClass} ${broken} ${checkClass}`}\n        onClick={() => {\n          if (checked === false) {\n            setCheckClass(\"checked\");\n            setChecked(true);\n            const brokenTextureNumber =\n              Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n            setBroken(`broken${brokenTextureNumber}`);\n          } else {\n            console.log(\"Already broken ;_)\");\n          }\n        }}\n      >\n        <p className=\"cellIndex\">{cellIndex}</p>\n        <p className=\"cell_text\">{cellText}</p>\n      </div>\n      <div className=\"winScreen\" style={{ zIndex: showWin, opacity: showWin }}>\n        <img src={winimage} className=\"winImage\" />\n      </div>\n    </>\n  );\n};\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}